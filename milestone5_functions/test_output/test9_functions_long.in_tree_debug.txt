>>> Interpreter: Program
>>> PrintVisitor: Program
GoDown
Current state: parent: 0x55f5cda338d0 ; child index: 1 
GoDown
Current state: parent: 0x55f5cda344e0 ; child index: 0 
>>> PrintVisitor: ClassDecl Dog 
>>> PrintVisitor: VarDecl type: int, is_array: false dog_index 
dog_index type: int, is_array: false 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
VarDecl: IsMethodDecl
SymbolTreeVisitor::FunctionScopeDown
Return type: void; Args: idx(type: int, is_array: false), 
GoDown
Current state: parent: 0x55f5cda34600 ; child index: 0 
Return type: void; Args: idx(type: int, is_array: false), 
>>> PrintVisitor: MethodDecl Return type: void; Args: idx(type: int, is_array: false),  SetIndex 
SetIndex Return type: void; Args: idx(type: int, is_array: false),  Return type: void; Args: idx(type: int, is_array: false),  
>>> PrintVisitor: AssignmentStmt
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: idx(type: int, is_array: false),  
ScopeLayer::IsArgument: idx dog_index
>>> PrintVisitor: IdentExpr idx 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: idx(type: int, is_array: false),  
ScopeLayer::IsArgument: idx idx
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: idx(type: int, is_array: false),  
ScopeLayer::IsArgument: idx idx
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: idx(type: int, is_array: false),  
ScopeLayer::IsArgument: idx idx
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: idx(type: int, is_array: false),  
ScopeLayer::IsArgument: idx dog_index
MethodDecl:  Return type: void; Args: idx(type: int, is_array: false),  Return type: void; Args: idx(type: int, is_array: false),  
Return type: void; Args: idx(type: int, is_array: false), 
ScopeLayerTree::SetFunctionScope Return type: void; Args: idx(type: int, is_array: false),  Return type: void; Args: idx(type: int, is_array: false),  
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 0 
SymbolTreeVisitor::FunctionScopeDown
Return type: void; Args: 
GoDown
Current state: parent: 0x55f5cda34600 ; child index: 1 
Return type: void; Args: 
>>> PrintVisitor: MethodDecl Return type: void; Args:  Bark 
Bark Return type: void; Args:  Return type: void; Args:  
>>> PrintVisitor: PrintStmt
>>> PrintVisitor: IdentExpr dog_index 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args:  
MethodDecl:  Return type: void; Args:  Return type: void; Args:  
Return type: void; Args: 
ScopeLayerTree::SetFunctionScope Return type: void; Args:  Return type: void; Args:  
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 0 
GoUp
Current state: parent: 0x55f5cda338d0 ; child index: 1 
GoDown
Current state: parent: 0x55f5cda344e0 ; child index: 1 
>>> PrintVisitor: ClassDecl House 
>>> PrintVisitor: VarDecl type: Dog, is_array: true dogs 
dogs type: Dog, is_array: true 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
VarDecl: IsMethodDecl
>>> PrintVisitor: VarDecl type: int, is_array: false num_dogs 
num_dogs type: int, is_array: false 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
VarDecl: IsMethodDecl
SymbolTreeVisitor::FunctionScopeDown
Return type: void; Args: new_num(type: int, is_array: false), 
GoDown
Current state: parent: 0x55f5cda35450 ; child index: 0 
Return type: void; Args: new_num(type: int, is_array: false), 
>>> PrintVisitor: MethodDecl Return type: void; Args: new_num(type: int, is_array: false),  SetNumDogs 
SetNumDogs Return type: void; Args: new_num(type: int, is_array: false),  Return type: void; Args: new_num(type: int, is_array: false),  
>>> PrintVisitor: AssignmentStmt
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_num(type: int, is_array: false),  
ScopeLayer::IsArgument: new_num num_dogs
>>> PrintVisitor: IdentExpr new_num 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_num(type: int, is_array: false),  
ScopeLayer::IsArgument: new_num new_num
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_num(type: int, is_array: false),  
ScopeLayer::IsArgument: new_num new_num
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_num(type: int, is_array: false),  
ScopeLayer::IsArgument: new_num new_num
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_num(type: int, is_array: false),  
ScopeLayer::IsArgument: new_num num_dogs
MethodDecl:  Return type: void; Args: new_num(type: int, is_array: false),  Return type: void; Args: new_num(type: int, is_array: false),  
Return type: void; Args: new_num(type: int, is_array: false), 
ScopeLayerTree::SetFunctionScope Return type: void; Args: new_num(type: int, is_array: false),  Return type: void; Args: new_num(type: int, is_array: false),  
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 1 
SymbolTreeVisitor::FunctionScopeDown
Return type: void; Args: new_dogs(type: Dog, is_array: true), 
GoDown
Current state: parent: 0x55f5cda35450 ; child index: 1 
Return type: void; Args: new_dogs(type: Dog, is_array: true), 
>>> PrintVisitor: MethodDecl Return type: void; Args: new_dogs(type: Dog, is_array: true),  SetDogs 
SetDogs Return type: void; Args: new_dogs(type: Dog, is_array: true),  Return type: void; Args: new_dogs(type: Dog, is_array: true),  
>>> PrintVisitor: AssignmentStmt
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dogs(type: Dog, is_array: true),  
ScopeLayer::IsArgument: new_dogs dogs
>>> PrintVisitor: IdentExpr new_dogs 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dogs(type: Dog, is_array: true),  
ScopeLayer::IsArgument: new_dogs new_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dogs(type: Dog, is_array: true),  
ScopeLayer::IsArgument: new_dogs new_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dogs(type: Dog, is_array: true),  
ScopeLayer::IsArgument: new_dogs new_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dogs(type: Dog, is_array: true),  
ScopeLayer::IsArgument: new_dogs dogs
MethodDecl:  Return type: void; Args: new_dogs(type: Dog, is_array: true),  Return type: void; Args: new_dogs(type: Dog, is_array: true),  
Return type: void; Args: new_dogs(type: Dog, is_array: true), 
ScopeLayerTree::SetFunctionScope Return type: void; Args: new_dogs(type: Dog, is_array: true),  Return type: void; Args: new_dogs(type: Dog, is_array: true),  
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 1 
SymbolTreeVisitor::FunctionScopeDown
Return type: void; Args: new_dog(type: Dog, is_array: false), 
GoDown
Current state: parent: 0x55f5cda35450 ; child index: 2 
Return type: void; Args: new_dog(type: Dog, is_array: false), 
>>> PrintVisitor: MethodDecl Return type: void; Args: new_dog(type: Dog, is_array: false),  AddDog 
AddDog Return type: void; Args: new_dog(type: Dog, is_array: false),  Return type: void; Args: new_dog(type: Dog, is_array: false),  
GoDown
Current state: parent: 0x55f5cda44800 ; child index: 0 
>>> PrintVisitor: IfStmt
>>> PrintVisitor: BinOpExpr
>>> PrintVisitor: IdentExpr num_dogs 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog num_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog num_dogs
>>> PrintVisitor: LengthExpr
>>> PrintVisitor: IdentExpr dogs 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog dogs
GoDown
Current state: parent: 0x55f5cda44a40 ; child index: 0 
>>> PrintVisitor: StmtListStmt
>>> PrintVisitor: LocalVarDeclStmt
>>> PrintVisitor: VarDecl type: Dog, is_array: true new_dogs 
new_dogs type: Dog, is_array: true 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog new_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
>>> PrintVisitor: AssignmentStmt
>>> PrintVisitor: NewArrayExpr type =  Dog 
>>> PrintVisitor: BinOpExpr
>>> PrintVisitor: IdentExpr num_dogs 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog num_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog num_dogs
>>> PrintVisitor: IntExpr 2 
>>> PrintVisitor: LocalVarDeclStmt
>>> PrintVisitor: VarDecl type: int, is_array: false i 
i type: int, is_array: false 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
>>> PrintVisitor: AssignmentStmt
>>> PrintVisitor: IntExpr 0 
GoDown
Current state: parent: 0x55f5cda44bb0 ; child index: 0 
>>> PrintVisitor: WhileStmt
>>> PrintVisitor: BinOpExpr
>>> PrintVisitor: IdentExpr i 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
>>> PrintVisitor: IdentExpr num_dogs 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog num_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog num_dogs
GoDown
Current state: parent: 0x55f5cda44ed0 ; child index: 0 
>>> PrintVisitor: StmtListStmt
>>> PrintVisitor: AssignmentStmt
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog new_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog new_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog new_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog new_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
>>> PrintVisitor: IdentExpr i 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
>>> PrintVisitor: SubscriptExpr
>>> PrintVisitor: IdentExpr dogs 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog dogs
>>> PrintVisitor: IdentExpr i 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog new_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog new_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
>>> PrintVisitor: AssignmentStmt
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
>>> PrintVisitor: BinOpExpr
>>> PrintVisitor: IdentExpr i 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
>>> PrintVisitor: IntExpr 1 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: ; Args:  
GoUp
Current state: parent: 0x55f5cda44bb0 ; child index: 0 
GoUp
Current state: parent: 0x55f5cda44a40 ; child index: 0 
>>> PrintVisitor: AssignmentStmt
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog dogs
>>> PrintVisitor: IdentExpr new_dogs 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog dogs
GoUp
Current state: parent: 0x55f5cda44800 ; child index: 0 
GoUp
Current state: parent: 0x55f5cda35450 ; child index: 2 
>>> PrintVisitor: AssignmentStmt
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog dogs
>>> PrintVisitor: IdentExpr num_dogs 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog num_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog num_dogs
>>> PrintVisitor: IdentExpr new_dog 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog new_dog
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog new_dog
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog new_dog
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog dogs
>>> PrintVisitor: AssignmentStmt
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog num_dogs
>>> PrintVisitor: BinOpExpr
>>> PrintVisitor: IdentExpr num_dogs 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog num_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog num_dogs
>>> PrintVisitor: IntExpr 1 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_dog(type: Dog, is_array: false),  
ScopeLayer::IsArgument: new_dog num_dogs
MethodDecl:  Return type: void; Args: new_dog(type: Dog, is_array: false),  Return type: void; Args: new_dog(type: Dog, is_array: false),  
Return type: void; Args: new_dog(type: Dog, is_array: false), 
ScopeLayerTree::SetFunctionScope Return type: void; Args: new_dog(type: Dog, is_array: false),  Return type: void; Args: new_dog(type: Dog, is_array: false),  
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 1 
SymbolTreeVisitor::FunctionScopeDown
Return type: Dog; Args: i(type: int, is_array: false), 
GoDown
Current state: parent: 0x55f5cda35450 ; child index: 3 
Return type: Dog; Args: i(type: int, is_array: false), 
>>> PrintVisitor: MethodDecl Return type: Dog; Args: i(type: int, is_array: false),  GetDog 
GetDog Return type: Dog; Args: i(type: int, is_array: false),  Return type: Dog; Args: i(type: int, is_array: false),  
>>> PrintVisitor: AssertStmt
>>> PrintVisitor: BinOpExpr
>>> PrintVisitor: IdentExpr i 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i i
>>> PrintVisitor: IntExpr -1 
>>> PrintVisitor: AssertStmt
>>> PrintVisitor: BinOpExpr
>>> PrintVisitor: IdentExpr i 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i i
>>> PrintVisitor: IdentExpr num_dogs 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i num_dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i num_dogs
>>> PrintVisitor: ReturnStmt
>>> PrintVisitor: SubscriptExpr
>>> PrintVisitor: IdentExpr dogs 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i dogs
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i dogs
>>> PrintVisitor: IdentExpr i 
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i i
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: Dog; Args: i(type: int, is_array: false),  
ScopeLayer::IsArgument: i i
MethodDecl:  Return type: Dog; Args: i(type: int, is_array: false),  Return type: Dog; Args: i(type: int, is_array: false),  
Return type: Dog; Args: i(type: int, is_array: false), 
ScopeLayerTree::SetFunctionScope Return type: Dog; Args: i(type: int, is_array: false),  Return type: Dog; Args: i(type: int, is_array: false),  
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 1 
GoUp
Current state: parent: 0x55f5cda338d0 ; child index: 1 
GoDown
Current state: parent: 0x55f5cda344e0 ; child index: 2 
>>> PrintVisitor: MainClass
>>> PrintVisitor: LocalVarDeclStmt
>>> PrintVisitor: VarDecl type: House, is_array: false house 
house type: House, is_array: false 
ScopeLayer::IsArgument
>>> PrintVisitor: AssignmentStmt
>>> PrintVisitor: NewExpr type =  House 
>>> PrintVisitor: MethodStmt
>>> PrintVisitor: MethodInvocation
>>> PrintVisitor: IdentExpr house 
SetNumDogs
>>> PrintVisitor: IntExpr 0 
GoDown
Current state: parent: 0x55f5cda45ad0 ; child index: 0 
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 2 
>>> PrintVisitor: MethodStmt
>>> PrintVisitor: MethodInvocation
>>> PrintVisitor: IdentExpr house 
SetDogs
>>> PrintVisitor: NewArrayExpr type =  Dog 
>>> PrintVisitor: IntExpr 1 
GoDown
Current state: parent: 0x55f5cda45ad0 ; child index: 1 
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 2 
GoDown
Current state: parent: 0x55f5cda45ad0 ; child index: 2 
>>> PrintVisitor: IfStmt
>>> PrintVisitor: BinOpExpr
>>> PrintVisitor: IntExpr 3 
>>> PrintVisitor: IntExpr 2 
GoDown
Current state: parent: 0x55f5cda45f30 ; child index: 0 
>>> PrintVisitor: StmtListStmt
>>> PrintVisitor: LocalVarDeclStmt
>>> PrintVisitor: VarDecl type: int, is_array: false i 
i type: int, is_array: false 
ScopeLayer::IsArgument
>>> PrintVisitor: LocalVarDeclStmt
>>> PrintVisitor: VarDecl type: int, is_array: true j 
j type: int, is_array: true 
ScopeLayer::IsArgument
>>> PrintVisitor: LocalVarDeclStmt
>>> PrintVisitor: VarDecl type: House, is_array: false h 
h type: House, is_array: false 
ScopeLayer::IsArgument
>>> PrintVisitor: LocalVarDeclStmt
>>> PrintVisitor: VarDecl type: House, is_array: true g 
g type: House, is_array: true 
ScopeLayer::IsArgument
GoUp
Current state: parent: 0x55f5cda45ad0 ; child index: 2 
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 2 
>>> PrintVisitor: LocalVarDeclStmt
>>> PrintVisitor: VarDecl type: Dog, is_array: false dog 
dog type: Dog, is_array: false 
ScopeLayer::IsArgument
>>> PrintVisitor: AssignmentStmt
>>> PrintVisitor: NewExpr type =  Dog 
>>> PrintVisitor: MethodStmt
>>> PrintVisitor: MethodInvocation
>>> PrintVisitor: IdentExpr dog 
SetIndex
>>> PrintVisitor: IntExpr 42 
GoDown
Current state: parent: 0x55f5cda45ad0 ; child index: 3 
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 2 
>>> PrintVisitor: MethodStmt
>>> PrintVisitor: MethodInvocation
>>> PrintVisitor: IdentExpr dog 
Bark
GoDown
Current state: parent: 0x55f5cda45ad0 ; child index: 4 
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 2 
>>> PrintVisitor: MethodStmt
>>> PrintVisitor: MethodInvocation
>>> PrintVisitor: IdentExpr house 
AddDog
>>> PrintVisitor: IdentExpr dog 
GoDown
Current state: parent: 0x55f5cda45ad0 ; child index: 5 
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 2 
>>> PrintVisitor: AssignmentStmt
>>> PrintVisitor: NewExpr type =  Dog 
>>> PrintVisitor: MethodStmt
>>> PrintVisitor: MethodInvocation
>>> PrintVisitor: IdentExpr dog 
SetIndex
>>> PrintVisitor: IntExpr 79 
GoDown
Current state: parent: 0x55f5cda45ad0 ; child index: 6 
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 2 
>>> PrintVisitor: MethodStmt
>>> PrintVisitor: MethodInvocation
>>> PrintVisitor: IdentExpr dog 
Bark
GoDown
Current state: parent: 0x55f5cda45ad0 ; child index: 7 
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 2 
>>> PrintVisitor: MethodStmt
>>> PrintVisitor: MethodInvocation
>>> PrintVisitor: IdentExpr house 
AddDog
>>> PrintVisitor: IdentExpr dog 
GoDown
Current state: parent: 0x55f5cda45ad0 ; child index: 8 
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 2 
>>> PrintVisitor: MethodStmt
>>> PrintVisitor: MethodInvocation
>>> PrintVisitor: MethodExpr
>>> PrintVisitor: MethodInvocation
>>> PrintVisitor: IdentExpr house 
GetDog
>>> PrintVisitor: IntExpr 1 
GoDown
Current state: parent: 0x55f5cda45ad0 ; child index: 9 
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 2 
Bark
GoDown
Current state: parent: 0x55f5cda45ad0 ; child index: 10 
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 2 
GoUp
Current state: parent: 0x55f5cda338d0 ; child index: 1 


GoDown
Current state: parent: 0x55f5cda338d0 ; child index: 1 
>>> Interpreter: ClassDecl
GoDown
Current state: parent: 0x55f5cda344e0 ; child index: 0 
GoUp
Current state: parent: 0x55f5cda338d0 ; child index: 1 
>>> Interpreter: ClassDecl
GoDown
Current state: parent: 0x55f5cda344e0 ; child index: 1 
GoUp
Current state: parent: 0x55f5cda338d0 ; child index: 1 
GoDown
Current state: parent: 0x55f5cda344e0 ; child index: 2 
>>> Interpreter: MainClass
>>> Interpreter: LocalVarDeclStmt
>>> Interpreter: VarDecl
>>> Interpreter: AssignmentStmt
Is var house declared: 1 
>>> Interpreter: NewExpr
Constructor::GetInstance
Constructor::Construct
Constructor::GetInstance
ClassBuilder::CreateObject: num_dogs
ClassBuilder::CreateObject: dogs
Constructor::Construct
Constructor::Construct
Constructor::GetInstance
ClassBuilder::CreateObject: dog_index
Constructor::Construct
>>> Interpreter: Assignment no subscript
>>> Interpreter: MethodStmt
>>> Interpreter: MethodInvocation
>>> Interpreter: IdentExpr
>>> Interpreter: IntExpr
GoDown
Current state: parent: 0x55f5cda45ad0 ; child index: 0 
GoDown
Current state: parent: 0x55f5cda45cd0 ; child index: 0 
>>> Interpreter: AssignmentStmt
Is var num_dogs declared: ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_num(type: int, is_array: false),  
ScopeLayer::IsArgument: new_num num_dogs
1 
>>> Interpreter: IdentExpr
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_num(type: int, is_array: false),  
ScopeLayer::IsArgument: new_num new_num
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_num(type: int, is_array: false),  
ScopeLayer::IsArgument: new_num new_num
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_num(type: int, is_array: false),  
ScopeLayer::IsArgument: new_num num_dogs
Class type: House, is_array: false; fields: {
-> dogs Class type: Dog, is_array: false; fields: {
-> dog_index 0}
-> num_dogs 0}

>>> Interpreter: Assignment no subscript
ScopeLayer::IsArgument
ScopeLayer::IsArgument not main Return type: void; Args: new_num(type: int, is_array: false),  
ScopeLayer::IsArgument: new_num num_dogs
Class type: House, is_array: false; fields: {
-> dogs Class type: Dog, is_array: false; fields: {
-> dog_index 0}
-> num_dogs 0}

GoUp
Current state: parent: 0x55f5cda45ad0 ; child index: 0 
GoUp
Current state: parent: 0x55f5cda344e0 ; child index: 2 
>>> Interpreter: MethodStmt
>>> Interpreter: MethodInvocation
>>> Interpreter: IdentExpr
