Program
	NEW SCOPE
	NEW SCOPE
	ClassDecl Dog
		VarDecl type: int, is_array: false dog_index
		NEW FUNCTION SCOPE
		MethodDecl Return type: void; Args: idx(type: int, is_array: false),  SetIndex
			NEW SCOPE
			AssignmentStmt
				Lvalue dog_index
				IdentExpr idx
		NEW FUNCTION SCOPE
		MethodDecl Return type: void; Args:  Bark
			NEW SCOPE
			PrintStmt
				IdentExpr dog_index
	NEW SCOPE
	ClassDecl House
		VarDecl type: Dog, is_array: true dogs
		VarDecl type: int, is_array: false num_dogs
		NEW FUNCTION SCOPE
		MethodDecl Return type: void; Args: new_num(type: int, is_array: false),  SetNumDogs
			NEW SCOPE
			AssignmentStmt
				Lvalue num_dogs
				IdentExpr new_num
		NEW FUNCTION SCOPE
		MethodDecl Return type: void; Args: new_dogs(type: Dog, is_array: true),  SetDogs
			NEW SCOPE
			AssignmentStmt
				Lvalue dogs
				IdentExpr new_dogs
		NEW FUNCTION SCOPE
		MethodDecl Return type: void; Args: new_dog(type: Dog, is_array: false),  AddDog
			NEW SCOPE
			NEW SCOPE
			IfStmt
				BinOpExpr
					IdentExpr num_dogs
4
					LengthExpr
						IdentExpr dogs
				NEW SCOPE
				StmtListStmt
					LocalVarDeclStmt
						VarDecl type: Dog, is_array: true new_dogs
					AssignmentStmt
						Lvalue new_dogs
						NewArrayExpr type = Dog
							BinOpExpr
								IdentExpr num_dogs
7
								IntExpr 2
					LocalVarDeclStmt
						VarDecl type: int, is_array: false i
					AssignmentStmt
						Lvalue i
						IntExpr 0
					NEW SCOPE
					WhileStmt
						BinOpExpr
							IdentExpr i
2
							IdentExpr num_dogs
						NEW SCOPE
						StmtListStmt
							AssignmentStmt
								Lvalue new_dogs
									IdentExpr i
								SubscriptExpr
									IdentExpr dogs
									IdentExpr i
							AssignmentStmt
								Lvalue i
								BinOpExpr
									IdentExpr i
5
									IntExpr 1
					AssignmentStmt
						Lvalue dogs
						IdentExpr new_dogs
			AssignmentStmt
				Lvalue dogs
					IdentExpr num_dogs
				IdentExpr new_dog
			AssignmentStmt
				Lvalue num_dogs
				BinOpExpr
					IdentExpr num_dogs
5
					IntExpr 1
		NEW FUNCTION SCOPE
		MethodDecl Return type: Dog; Args: i(type: int, is_array: false),  GetDog
			NEW SCOPE
			AssertStmt
				BinOpExpr
					IdentExpr i
3
					IntExpr -1
			AssertStmt
				BinOpExpr
					IdentExpr i
2
					IdentExpr num_dogs
			ReturnStmt
				SubscriptExpr
					IdentExpr dogs
					IdentExpr i
	NEW SCOPE
	MainClass
		LocalVarDeclStmt
			VarDecl type: House, is_array: false house
		AssignmentStmt
			Lvalue house
			NewExpr type = House
		MethodStmt
			MethodInvocation
				IdentExpr house
				IntExpr 0
				NEW SCOPE
		MethodStmt
			MethodInvocation
				IdentExpr house
				NewArrayExpr type = Dog
					IntExpr 1
				NEW SCOPE
		NEW SCOPE
		IfStmt
			BinOpExpr
				IntExpr 3
3
				IntExpr 2
			NEW SCOPE
			StmtListStmt
				LocalVarDeclStmt
					VarDecl type: int, is_array: false i
				LocalVarDeclStmt
					VarDecl type: int, is_array: true j
				LocalVarDeclStmt
					VarDecl type: House, is_array: false h
				LocalVarDeclStmt
					VarDecl type: House, is_array: true g
		LocalVarDeclStmt
			VarDecl type: Dog, is_array: false dog
		AssignmentStmt
			Lvalue dog
			NewExpr type = Dog
		MethodStmt
			MethodInvocation
				IdentExpr dog
				IntExpr 42
				NEW SCOPE
		MethodStmt
			MethodInvocation
				IdentExpr dog
				NEW SCOPE
		MethodStmt
			MethodInvocation
				IdentExpr house
				IdentExpr dog
				NEW SCOPE
		AssignmentStmt
			Lvalue dog
			NewExpr type = Dog
		MethodStmt
			MethodInvocation
				IdentExpr dog
				IntExpr 79
				NEW SCOPE
		MethodStmt
			MethodInvocation
				IdentExpr dog
				NEW SCOPE
		MethodStmt
			MethodInvocation
				IdentExpr house
				IdentExpr dog
				NEW SCOPE
		MethodStmt
			MethodInvocation
				MethodExpr
					MethodInvocation
						IdentExpr house
						IntExpr 0
						NEW SCOPE
				NEW SCOPE
